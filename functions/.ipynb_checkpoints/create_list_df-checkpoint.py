{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ab558843-2075-4cc7-87e7-09ee02bbb108",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import random \n",
    "import string\n",
    "from scipy.stats import truncnorm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b8d03933-e780-48fb-a70b-592b8d027484",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Funcion para calcular el numero de registros si random es False\n",
    "def get_random_rows(columns):\n",
    "    max_values = {} \n",
    "\n",
    "    for index, element in enumerate(columns):\n",
    "        if(element[\"type\"] == \"numeric\"):\n",
    "            max_values[index] = ((element[\"values\"][\"max\"]+1) - element[\"values\"][\"min\"])\n",
    "            \n",
    "        if(element[\"type\"] == \"date\"):\n",
    "            #calcular los dias de diferencia entre ambas fechas\n",
    "            number_days = (\n",
    "                pd.to_datetime(element[\"values\"][\"max\"]) - \n",
    "                pd.to_datetime(element[\"values\"][\"min\"])\n",
    "            ).days\n",
    "            max_values[index] = number_days + 1\n",
    "\n",
    "        if(element[\"type\"] == \"category\"):\n",
    "            max_values[index] = len(element[\"values\"])\n",
    "\n",
    "        if(element[\"type\"] == \"unique\"):\n",
    "            max_values[index] = 1\n",
    "    \n",
    "    max_key = max(max_values, key=lambda key: max_values[key])\n",
    "    return { \n",
    "        \"column\" : max_key,\n",
    "        \"value\": max_values[max_key] }\n",
    "\n",
    "#Funcion para crear una lista de valores unicos\n",
    "def get_random_unique(n):\n",
    "    list_id = set()\n",
    "\n",
    "    while len(list_id) < n:\n",
    "        characters = string.ascii_letters + string.digits\n",
    "        id = ''.join(random.choices(characters, k = 16))\n",
    "        list_id.add(id)  \n",
    "    return list(list_id)\n",
    "\n",
    "#Funcion para crear categorias aleatorias\n",
    "def get_random_categories( items , n  ):\n",
    "    return random.choices(items, k=n)\n",
    "\n",
    "def get_random_numbers( min , max, n ):\n",
    "    values = []\n",
    "    for i in range(n):\n",
    "        values.append(random.randint(min, max))\n",
    "    return values\n",
    "\n",
    "def get_random_dates( min , max , n ):\n",
    "    items = pd.date_range( start = min , end = max , freq = 'D' )\n",
    "    return get_random_categories( items , n )\n",
    "\n",
    "def generate_truncated_normal_data(mean, std, min, max, n):\n",
    "    # Calcular los parámetros de la distribución normal truncada\n",
    "    a, b = (min - mean) / std, (max - mean) / std\n",
    "    data = truncnorm(a, b, loc=mean, scale=std).rvs(n)\n",
    "    return list(map(int, data))\n",
    "\n",
    "#Funcion para calcular la columna con mas valores en random = false\n",
    "def get_list_random_false(column):\n",
    "    data = []\n",
    "\n",
    "    if(column[\"type\"] == \"category\"):\n",
    "        data = column[\"values\"]\n",
    "    elif(column[\"type\"] == \"date\"):\n",
    "        items = pd.date_range( start = column[\"values\"][\"min\"] , end = column[\"values\"][\"max\"] , freq = 'D' )\n",
    "        data = list(items)\n",
    "    elif(column[\"type\"] == \"numeric\"):\n",
    "        data = list(range(column[\"values\"][\"min\"], column[\"values\"][\"max\"] +1 ) )\n",
    "    else:\n",
    "        raise Error_dataframe(\"La columna {} es de tipo de dato no válido\".format(column[\"name\"]))\n",
    "    return data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e9fedfb6-4914-4c14-bc90-bb21b83f8bbf",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Funcion para crear un dataFrame SIN FOREIGN\n",
    "def get_columns(columns, number_row):\n",
    "    data = {}\n",
    "\n",
    "    types = [ \"category\" , \"unique\" , \"date\", \"foreign\", \"numeric\"]\n",
    "    for index, element in enumerate(columns):\n",
    "        if element[\"type\"] in types:\n",
    "            if element[\"type\"] == \"category\":\n",
    "                values = get_random_categories( element[\"values\"] , number_row  )\n",
    "\n",
    "            if element[\"type\"] == \"unique\":\n",
    "                values = get_random_unique(number_row)\n",
    "\n",
    "            if element[\"type\"] == \"date\":\n",
    "                values = get_random_dates( \n",
    "                    element[\"values\"][\"min\"], element[\"values\"][\"max\"]\n",
    "                    , number_row)\n",
    "\n",
    "            #aqui va el foreign\n",
    "            if element[\"type\"] == \"foreign\":\n",
    "                print(\"No se {}\".format(element[\"values\"]))\n",
    "                values = get_random_numbers( \n",
    "                        4, 20\n",
    "                        , number_row)\n",
    "            \n",
    "            if element[\"type\"] == \"numeric\":\n",
    "                if \"std\" in element[\"values\"]:\n",
    "                    values = generate_truncated_normal_data(\n",
    "                        element[\"values\"][\"mean\"], element[\"values\"][\"std\"]\n",
    "                        , element[\"values\"][\"min\"], element[\"values\"][\"max\"]\n",
    "                        , number_row)\n",
    "                else:\n",
    "                    values = get_random_numbers( \n",
    "                        element[\"values\"][\"min\"], element[\"values\"][\"max\"]\n",
    "                        , number_row)\n",
    "        \n",
    "            data[element[\"name\"]] = values\n",
    "            \n",
    "    return pd.DataFrame( data )\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5eaa1acb-aa69-44ce-9d8e-403a2041ecf4",
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_dataframe(setting):\n",
    "    try:\n",
    "        if(\"random\" in setting):\n",
    "            if(setting[\"random\"]):\n",
    "                if(\"random_rows\" in setting):\n",
    "                    if(isinstance(setting[\"random_rows\"], int) or isinstance(setting[\"random_rows\"], float)):\n",
    "                        print(setting[\"ds\"])\n",
    "                        n = int(setting[\"random_rows\"])\n",
    "                        data = get_columns(setting[\"columns\"], n)\n",
    "                        data.name = setting[\"ds\"]\n",
    "                    else:\n",
    "                        raise Error_dataframe(\"El valor de random_rows debe ser numerico\")\n",
    "                else:\n",
    "                    raise Error_dataframe(\"El atributo random_rows es obligatorio\")\n",
    "            else:\n",
    "                    copy_columns = setting[\"columns\"].copy()\n",
    "                    max_rows = get_random_rows(setting[\"columns\"])\n",
    "                    del copy_columns[max_rows[\"column\"]]\n",
    "\n",
    "                    print(setting[\"ds\"])\n",
    "        \n",
    "                    data = get_columns(copy_columns, max_rows[\"value\"])\n",
    "        \n",
    "                    new_data = get_list_random_false(setting[\"columns\"][max_rows[\"column\"]])\n",
    "                    name_column = setting[\"columns\"][max_rows[\"column\"]][\"name\"]\n",
    "        \n",
    "                    data.insert(max_rows[\"column\"], name_column, new_data)\n",
    "                    data.name = setting[\"ds\"]\n",
    "        else:\n",
    "            raise Error_dataframe(\"El atributo random es obligatorio\")\n",
    "        return data\n",
    "    except Exception as e:\n",
    "        print(f\"Error en la create_dataframe del DataFrame: {e}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2d4ff452-81a2-4361-b45f-50eb4a6c7614",
   "metadata": {},
   "outputs": [],
   "source": [
    "def search_foreign(dictionaries): \n",
    "    relations = {}\n",
    "    for dictionary in dictionaries:\n",
    "        for column in dictionary['columns']:\n",
    "            if column['type'] == 'foreign':\n",
    "                foreign_ds, foreign_col = column['values'].split('.')\n",
    "                found_dataset = False\n",
    "                found_foreign = False\n",
    "                for dic in dictionaries:\n",
    "                    if dic['ds'] == foreign_ds:\n",
    "                        found_dataset = True\n",
    "                        for col in dic['columns']:\n",
    "                            if col['name'] == foreign_col:\n",
    "                                relations[foreign_ds+\".\"+foreign_col] = dictionary['ds']\n",
    "                                found_foreign = True\n",
    "                                break\n",
    "                        if found_foreign:\n",
    "                            break\n",
    "                if not found_dataset:\n",
    "                    raise Error_dataframe(\n",
    "                        \"No se encontró el dataset {}. Verifique que el dataset exista.\".format(foreign_ds)\n",
    "                    )\n",
    "                if not found_foreign:\n",
    "                    raise Error_dataframe(\n",
    "                        \"No se encontró la columna {} en el dataset {}. \"\n",
    "                        \"Las posibles columnas son: {}\".format(\n",
    "                            foreign_col, foreign_ds, \n",
    "                            [col['name'] for col in dic['columns']]\n",
    "                        )\n",
    "                    )\n",
    "    return relations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "66177f6f-4a5f-4777-879b-c84220d7977c",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Error_dataframe(Exception):\n",
    "    def __init__(self, message):\n",
    "        super().__init__(message)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c08ee751-ef95-42f9-9178-06e9d8db72df",
   "metadata": {},
   "outputs": [],
   "source": [
    "d1 = {\n",
    "    \"ds\": \"pacientes\",\n",
    "    \"columns\": [\n",
    "        {\n",
    "            \"name\": \"id\",\n",
    "            \"type\": \"unique\"\n",
    "        },\n",
    "        {\n",
    "            \"name\": \"edad\",\n",
    "            \"type\": \"numeric\",\n",
    "            \"values\": {\n",
    "                \"min\": 1,\n",
    "                \"max\": 100,\n",
    "                \"std\": 3.48,\n",
    "                \"mean\": 46.5\n",
    "            }\n",
    "        },\n",
    "        {\n",
    "            \"name\": \"genero\",\n",
    "            \"type\": \"category\",\n",
    "            \"values\": [\"Femenino\", \"Masculino\"]\n",
    "        },\n",
    "        {\n",
    "            \"name\": \"primera_cita\",\n",
    "            \"type\": \"date\",\n",
    "            \"values\": {\n",
    "                \"min\": \"1930-02-23\",\n",
    "                \"max\": \"2024-06-04\"\n",
    "            }\n",
    "        }\n",
    "    ],\n",
    "    \"random\": False\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "dcf4eb6b-c770-4c73-951d-62ecdaecddfd",
   "metadata": {},
   "outputs": [],
   "source": [
    "d2 = {\n",
    "    \"ds\": \"doctores\",\n",
    "    \"columns\": [\n",
    "        {\n",
    "            \"name\": \"id\", \n",
    "            \"type\": \"unique\"\n",
    "        },\n",
    "        {\n",
    "            \"name\": \"fecha_ingreso\",\n",
    "            \"type\": \"date\",\n",
    "            \"values\": {\n",
    "                \"min\": \"2000-02-23\",\n",
    "                \"max\": \"2024-03-04\"\n",
    "            }\n",
    "        },\n",
    "        {\n",
    "            \"name\": \"departamento\",\n",
    "            \"type\": \"category\",\n",
    "            \"values\": [\"MGeneral\", \"Cirugía\", \"Oncología\", \"Pediatría\"]\n",
    "        },\n",
    "        {\n",
    "            \"name\": \"hospital\",\n",
    "            \"type\": \"foreign\",\n",
    "            \"values\": \"hospitales.nombre\"\n",
    "        }\n",
    "    ],\n",
    "    \"random\": False\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c62e240f-8af2-43ac-a9b2-2232c69a2d07",
   "metadata": {},
   "outputs": [],
   "source": [
    "d3 = {\n",
    "    \"ds\": \"hospitales\",\n",
    "    \"columns\": [\n",
    "        {\n",
    "            \"name\": \"nombre\",\n",
    "            \"type\": \"unique\",\n",
    "        },\n",
    "        {\n",
    "            \"name\": \"ciudad\",\n",
    "            \"type\": \"category\",\n",
    "            \"values\": [\"SP\", \"T\", \"C\", \"M\", \"SB\", \"PC\"]\n",
    "        },\n",
    "        {\n",
    "            \"name\": \"cantidad_empleados\",\n",
    "            \"type\": \"numeric\",\n",
    "            \"values\": {\n",
    "                \"min\": 800,\n",
    "                \"max\": 10000\n",
    "            }\n",
    "        }\n",
    "    ],\n",
    "    \"random\": True,\n",
    "    \"random_rows\": 1500\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7e77cc7c-504d-40c0-9348-cc182702afd0",
   "metadata": {},
   "outputs": [],
   "source": [
    "d4 = {\n",
    "    \"ds\": \"citas\",\n",
    "    \"columns\": [\n",
    "        {\n",
    "            \"name\": \"doctor\",\n",
    "            \"type\": \"foreign\",\n",
    "            \"values\": \"doctores.id\"\n",
    "        },\n",
    "        {\n",
    "            \"name\": \"paciente\",\n",
    "            \"type\": \"foreign\",\n",
    "            \"values\": \"pacientes.id\"\n",
    "        },\n",
    "        {\n",
    "            \"name\": \"fecha_cita\",\n",
    "            \"type\": \"date\",\n",
    "            \"values\": {\n",
    "                \"min\":  \"1930-02-23\",\n",
    "                \"max\": \"2024-06-04\"\n",
    "            }\n",
    "        }, \n",
    "        {\n",
    "            \"name\": \"enfermedad\",\n",
    "            \"type\": \"foreign\",\n",
    "            \"values\": \"enfermedades.id\"\n",
    "        }\n",
    "    ],\n",
    "    \"random\": True,\n",
    "    \"random_rows\": 10000000\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1a836c5f-2c8d-4022-a229-01e36f4e78f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "d5 = {\n",
    "    \"ds\": \"enfermedades\",\n",
    "    \"columns\": [\n",
    "        {\n",
    "            \"name\": \"id\",\n",
    "            \"type\": \"unique\",\n",
    "        },\n",
    "        {\n",
    "            \"name\": \"estado\",\n",
    "            \"type\": \"category\",\n",
    "            \"values\": [\"leve\", \"moderado\", \"grave\"]\n",
    "        },\n",
    "        {\n",
    "            \"name\": \"porcentaje_recuperacion\",\n",
    "            \"type\": \"numeric\",\n",
    "            \"values\": {\n",
    "                \"min\": 1,\n",
    "                \"max\": 80,\n",
    "                \"std\": 3.48,\n",
    "                \"mean\": 75.9\n",
    "            }\n",
    "        }\n",
    "    ],\n",
    "    \"random\": False\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "56d59a7c-273d-47c0-bf2b-484e9bc6f388",
   "metadata": {},
   "outputs": [],
   "source": [
    "def build_dataframes(conf_list):\n",
    "    dataframe_list = []\n",
    "    print(\"ok\")\n",
    "    try:\n",
    "        relations = search_foreign(conf_list)\n",
    "        \n",
    "        for element in conf_list:\n",
    "            dependent = False\n",
    "            for key in relations:\n",
    "                if element[\"ds\"] == relations[key]:\n",
    "                    dependent = True\n",
    "                    break\n",
    "                                \n",
    "            if not dependent:\n",
    "                \n",
    "                new = create_dataframe(element)\n",
    "                dataframe_list.append(new)           \n",
    "                    \n",
    "        for element in conf_list:\n",
    "            if element[\"ds\"] in relations.values():\n",
    "                new = create_dataframe(element)\n",
    "                dataframe_list.append(new)                      \n",
    "                                   \n",
    "        return dataframe_list\n",
    "    except Exception as e:\n",
    "        print(f\"Error en la build_dataframes: {e}\")    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f5071b67-112f-491d-8f07-fd91f2f17f3c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ok\n",
      "pacientes\n",
      "hospitales\n",
      "enfermedades\n"
     ]
    }
   ],
   "source": [
    "dicts = [d1, d3, d5]\n",
    "mejor =  build_dataframes(dicts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f1a59701-ef4b-4673-ad63-a53d3346cc02",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'ds': 'pacientes',\n",
       "  'columns': [{'name': 'id', 'type': 'unique'},\n",
       "   {'name': 'edad',\n",
       "    'type': 'numeric',\n",
       "    'values': {'min': 1, 'max': 100, 'std': 3.48, 'mean': 46.5}},\n",
       "   {'name': 'genero', 'type': 'category', 'values': ['Femenino', 'Masculino']},\n",
       "   {'name': 'primera_cita',\n",
       "    'type': 'date',\n",
       "    'values': {'min': '1930-02-23', 'max': '2024-06-04'}}],\n",
       "  'random': False},\n",
       " {'ds': 'hospitales',\n",
       "  'columns': [{'name': 'nombre', 'type': 'unique'},\n",
       "   {'name': 'ciudad',\n",
       "    'type': 'category',\n",
       "    'values': ['SP', 'T', 'C', 'M', 'SB', 'PC']},\n",
       "   {'name': 'cantidad_empleados',\n",
       "    'type': 'numeric',\n",
       "    'values': {'min': 800, 'max': 10000}}],\n",
       "  'random': True,\n",
       "  'random_rows': 1500},\n",
       " {'ds': 'enfermedades',\n",
       "  'columns': [{'name': 'id', 'type': 'unique'},\n",
       "   {'name': 'estado',\n",
       "    'type': 'category',\n",
       "    'values': ['leve', 'moderado', 'grave']},\n",
       "   {'name': 'porcentaje_recuperacion',\n",
       "    'type': 'numeric',\n",
       "    'values': {'min': 1, 'max': 80, 'std': 3.48, 'mean': 75.9}}],\n",
       "  'random': False}]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dicts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ee4a6294-61c8-4c85-a458-e6bb66ebe47e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ok\n"
     ]
    }
   ],
   "source": [
    "print(\"ok\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "33f0c3f1-a101-46dd-bb48-2bb25f0ea187",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
